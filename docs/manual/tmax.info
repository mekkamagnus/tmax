This is tmax.info, produced by makeinfo version 7.2 from tmax.texi.

This manual is for tmax (version 1.0), a comprehensive terminal-based
text editor with T-Lisp extensibility.

   Copyright © 2024 tmax contributors.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.


File: tmax.info,  Node: Top,  Next: Introduction,  Up: (dir)

tmax
****

This manual describes tmax, a comprehensive terminal-based text editor
with T-Lisp extensibility.

   This manual is for tmax (version 1.0), a comprehensive terminal-based
text editor with T-Lisp extensibility.

   Copyright © 2024 tmax contributors.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.

* Menu:

* Introduction::        What is tmax and why use it
* Installation::        Getting tmax up and running
* Basic Usage::         Your first steps with tmax
* Editing Modes::       Understanding tmax's modal interface
* Key Bindings::        Default keybindings and customization
* T-Lisp System::       Programming and extending tmax
* T-Lisp Language Reference:: Complete T-Lisp language reference
* Buffer Management::   Working with multiple files
* Configuration::       Customizing tmax to your needs
* Command Reference::   Complete T-Lisp API documentation
* Examples::            Real-world usage examples
* Troubleshooting::     Common issues and solutions
* Index::               Complete index


File: tmax.info,  Node: Introduction,  Next: Installation,  Prev: Top,  Up: Top

1 Introduction
**************

tmax is a comprehensive, extensible terminal-based text editor built
with a TypeScript core and T-Lisp scripting system.  Following the Emacs
architecture philosophy, TypeScript handles low-level operations
(terminal I/O, file system, memory management) while T-Lisp handles all
higher-level editor functionality.

1.1 Key Features
================

   • *Full-screen modal editing* with alternate screen buffer and
     viewport management
   • *Complete T-Lisp interpreter* with tail-call optimization and macro
     system
   • *Five editing modes*: normal, insert, visual, command, and M-x
   • *Vim-like key bindings* with proper hjkl navigation
   • *Command interface* with both vim-style (:q, :w) and M-x (SPC ;)
     commands
   • *Multiple buffer management* with gap buffer implementation
   • *Comprehensive editor API* (25+ T-Lisp functions)
   • *Zero external dependencies*

1.2 Target Users
================

tmax is designed for:
   • Software developers who want unlimited customization
   • System administrators who prefer keyboard-driven workflows
   • Power users who value extensibility over simplicity
   • Anyone interested in Lisp-based editor configuration

1.3 Architecture Overview
=========================

1.3.1 TypeScript Core Responsibilities
--------------------------------------

   • Terminal I/O with full-screen interface and alternate screen buffer
   • File system operations with async reading/writing and proper error
     handling
   • Memory management with efficient buffer operations and cursor
     tracking
   • T-Lisp interpreter runtime with complete interpreter and tail-call
     optimization
   • Buffer management using gap buffer implementation for efficient
     text editing
   • Viewport management for scrolling and cursor positioning in large
     files
   • Key handling with raw mode input and proper key normalization

1.3.2 T-Lisp Engine Responsibilities
------------------------------------

   • Editor commands with all functionality exposed through T-Lisp API
   • Mode management for modal editing state and transitions
   • Key binding definitions with configurable key mappings
   • User interface logic including status line, command input, M-x
     functionality
   • Configuration management through .tmaxrc file loading and execution
   • Extensibility via custom functions, macros, and commands


File: tmax.info,  Node: Installation,  Next: Basic Usage,  Prev: Introduction,  Up: Top

2 Installation
**************

2.1 Requirements
================

tmax requires:
   • Deno 2.3.7 or later
   • Terminal with ANSI escape sequence support
   • Unix-like operating system (Linux, macOS, BSD)

2.2 Installing Deno
===================

If you don't have Deno installed:

     # Linux/macOS
     curl -fsSL https://deno.land/install.sh | sh

     # Or using package managers:
     # macOS with Homebrew
     brew install deno

     # Linux with Snap
     snap install deno

2.3 Getting tmax
================

Clone the repository and set up the development environment:

     git clone <repository-url> tmax
     cd tmax

2.4 Running tmax
================

2.4.1 Start the Editor
----------------------

     deno task start [filename]

2.4.2 Development Mode with Auto-reload
---------------------------------------

     deno task dev

2.4.3 T-Lisp REPL
-----------------

     deno task repl

2.5 Testing the Installation
============================

Run the comprehensive test suite to verify your installation:

     deno task test

   This runs 131 tests across 8 comprehensive test suites.


File: tmax.info,  Node: Basic Usage,  Next: Editing Modes,  Prev: Installation,  Up: Top

3 Basic Usage
*************

3.1 Starting tmax
=================

Launch tmax from your terminal:

     deno task start

   Or open a specific file:

     deno task start myfile.txt

3.2 Your First Session
======================

When tmax starts, you'll see:
   • A full-screen interface using the alternate screen buffer
   • A status line at the bottom showing current mode and cursor
     position
   • The current buffer content (or empty *scratch* buffer)

3.3 Essential Keys
==================

3.3.1 Immediate Survival Keys
-----------------------------

‘q’
     Quit tmax (in normal mode)
‘:q’
     Quit via command mode
‘Escape’
     Return to normal mode from any other mode

3.3.2 Basic Movement
--------------------

‘h’
     Move cursor left
‘j’
     Move cursor down
‘k’
     Move cursor up
‘l’
     Move cursor right

3.3.3 Mode Switching
--------------------

‘i’
     Enter insert mode
‘:’
     Enter command mode
‘SPC ;’
     Enter M-x mode (Emacs-style command execution)

3.4 Exiting tmax
================

From normal mode:
   • Press ‘q’ to quit immediately
   • Press ‘:’ then type ‘q’ and press ‘Enter’


File: tmax.info,  Node: Editing Modes,  Next: Key Bindings,  Prev: Basic Usage,  Up: Top

4 Editing Modes
***************

tmax uses a modal editing system with five distinct modes, each
optimized for specific tasks.

4.1 Normal Mode
===============

Normal mode is the default mode for navigation and text manipulation
commands.

4.1.1 Characteristics
---------------------

   • Primary mode for cursor movement
   • Text modification through commands
   • Access point to other modes
   • Status line shows ‘-- NORMAL --’

4.1.2 Navigation Commands
-------------------------

‘h’
     Move cursor left one character
‘j’
     Move cursor down one line
‘k’
     Move cursor up one line
‘l’
     Move cursor right one character

4.2 Insert Mode
===============

Insert mode is for entering and editing text directly.

4.2.1 Entering Insert Mode
--------------------------

‘i’
     Insert text before cursor (from normal mode)

4.2.2 In Insert Mode
--------------------

   • Type normally to insert text
   • ‘Backspace’ deletes the previous character
   • ‘Enter’ creates a new line
   • ‘Escape’ returns to normal mode

4.2.3 Status Display
--------------------

Status line shows ‘-- INSERT --’ with cursor position.

4.3 Command Mode
================

Command mode provides a vim-style command interface for file operations
and editor control.

4.3.1 Entering Command Mode
---------------------------

‘:’
     From normal mode, press colon to enter command mode

4.3.2 Command Mode Interface
----------------------------

   • Prompt shows ‘:’ followed by your input
   • Type commands and press ‘Enter’ to execute
   • ‘Escape’ cancels and returns to normal mode
   • ‘Backspace’ deletes characters from command line

4.3.3 Available Commands
------------------------

‘q’
     Quit the editor
‘w’
     Write (save) current buffer
‘wq’
     Write and quit

4.4 M-x Mode
============

M-x mode provides Emacs-style function execution by name.

4.4.1 Entering M-x Mode
-----------------------

‘SPC ;’
     From normal mode, press Space followed by semicolon

4.4.2 M-x Mode Interface
------------------------

   • Prompt shows ‘M-x ’ followed by your input
   • Type function names and press ‘Enter’ to execute
   • ‘Escape’ cancels and returns to normal mode
   • ‘Backspace’ deletes characters from function name

4.4.3 Available Functions
-------------------------

‘cursor-position’
     Show current cursor position
‘editor-mode’
     Display current editing mode
‘quit’
     Quit the editor

4.5 Visual Mode
===============

Visual mode is planned for text selection and manipulation (currently in
development).

4.6 Mode Transitions
====================

     Normal ←→ Insert    (i / Escape)
     Normal ←→ Command   (: / Escape)
     Normal ←→ M-x      (SPC ; / Escape)
     Normal ←→ Visual   (planned)


File: tmax.info,  Node: Key Bindings,  Next: T-Lisp System,  Prev: Editing Modes,  Up: Top

5 Key Bindings
**************

tmax uses a T-Lisp-centric key binding system that is fully
customizable.

5.1 Default Key Bindings
========================

5.1.1 Normal Mode Bindings
--------------------------

Key            Command                       Description
---------------------------------------------------------------------------
‘h’            ‘(cursor-move (cursor-line)   Move left
               (- (cursor-column) 1))’
‘j’            ‘(cursor-move (+              Move down
               (cursor-line) 1)
               (cursor-column))’
‘k’            ‘(cursor-move (-              Move up
               (cursor-line) 1)
               (cursor-column))’
‘l’            ‘(cursor-move (cursor-line)   Move right
               (+ (cursor-column) 1))’
‘i’            ‘(editor-set-mode             Enter insert mode
               "insert")’
‘:’            ‘(editor-enter-command-mode)’ Enter command mode
‘SPC’          ‘(editor-handle-space)’       Start M-x sequence
‘;’            ‘(editor-handle-semicolon)’   Complete M-x sequence
‘q’            ‘(editor-quit)’               Quit editor

5.1.2 Insert Mode Bindings
--------------------------

Key            Command                       Description
---------------------------------------------------------------------------
‘Escape’       ‘(editor-set-mode             Return to normal mode
               "normal")’
‘Backspace’    ‘(buffer-delete 1)’           Delete previous character
‘Enter’        ‘(buffer-insert "\n")’        Insert newline
Printable      ‘(buffer-insert "char")’      Insert character
chars

5.1.3 Command Mode Bindings
---------------------------

Key            Command                       Description
---------------------------------------------------------------------------
‘Escape’       ‘(editor-exit-command-mode)’  Cancel command mode
‘Enter’        ‘(editor-execute-command-line)’Execute command
‘q’            ‘(editor-quit)’               Quit editor
Printable      Added to command line         Build command
chars

5.1.4 M-x Mode Bindings
-----------------------

Key            Command                       Description
---------------------------------------------------------------------------
‘Escape’       ‘(editor-exit-mx-mode)’       Cancel M-x mode
‘Enter’        ‘(editor-execute-mx-command)’ Execute function
Printable      Added to function name        Build function name
chars

5.2 Customizing Key Bindings
============================

Key bindings are defined in T-Lisp using the ‘key-bind’ function.

5.2.1 The key-bind Function
---------------------------

     (key-bind KEY COMMAND MODE)

KEY
     String representing the key (e.g., "h", "Escape", "Enter")
COMMAND
     T-Lisp expression as string to execute when key is pressed
MODE
     Optional mode restriction ("normal", "insert", "visual", "command",
     "mx")

5.2.2 Examples
--------------

     ;; Bind 'x' to delete character in normal mode
     (key-bind "x" "(buffer-delete 1)" "normal")

     ;; Bind Ctrl+S to save (works in all modes)
     (key-bind "C-s" "(quick-save)")

     ;; Bind F1 to show help
     (key-bind "F1" "(show-help)" "normal")

5.3 Core Bindings File
======================

Default key bindings are stored in ‘src/tlisp/core-bindings.tlisp’.
This file is loaded automatically when tmax starts.

5.3.1 File Structure
--------------------

     ;; =================================================================
     ;; BASIC NAVIGATION (Normal Mode)
     ;; =================================================================
     (key-bind "h" "(cursor-move (cursor-line) (- (cursor-column) 1))" "normal")
     ;; ... more navigation bindings

     ;; =================================================================
     ;; MODE SWITCHING
     ;; =================================================================
     (key-bind "i" "(editor-set-mode \"insert\")" "normal")
     ;; ... more mode bindings


File: tmax.info,  Node: T-Lisp System,  Next: T-Lisp Language Reference,  Prev: Key Bindings,  Up: Top

6 T-Lisp System
***************

tmax includes a complete T-Lisp interpreter for editor customization and
extensibility.

6.1 T-Lisp Overview
===================

T-Lisp (tmax Lisp) is a Lisp-1 dialect with:
   • Lexical scoping
   • Tail-call optimization
   • Macro system with quasiquote support
   • Comprehensive standard library (31 built-in functions)
   • Editor API integration (25+ editor-specific functions)

6.2 Basic Syntax
================

6.2.1 Data Types
----------------

‘Numbers’
     ‘42’, ‘3.14’, ‘-17’
‘Strings’
     ‘"hello world"’, ‘"file.txt"’
‘Symbols’
     ‘x’, ‘my-var’, ‘buffer-insert’
‘Lists’
     ‘(a b c)’, ‘(+ 1 2 3)’
‘Boolean’
     ‘#t’ (true), ‘#f’ (false)
‘Nil’
     ‘nil’ (empty list)

6.2.2 Function Calls
--------------------

     (function-name arg1 arg2 arg3)
     (+ 1 2 3)        ; Returns 6
     (buffer-insert "hello")
     (cursor-move 10 5)

6.2.3 Variable Binding
----------------------

     ;; Define variables
     (setq x 42)
     (setq name "tmax")

     ;; Let bindings (local scope)
     (let ((x 10) (y 20))
       (+ x y))       ; Returns 30

6.3 Standard Library Functions
==============================

6.3.1 Arithmetic Functions
--------------------------

‘(+...)’
     Addition with any number of arguments
‘(-...)’
     Subtraction with any number of arguments
‘(*...)’
     Multiplication with any number of arguments
‘(/...)’
     Division with any number of arguments
‘(mod a b)’
     Modulo operation

6.3.2 List Functions
--------------------

‘(cons a b)’
     Create cons cell with car A and cdr B
‘(car list)’
     Get first element of list
‘(cdr list)’
     Get rest of list after first element
‘(length list)’
     Get length of list
‘(nth n list)’
     Get Nth element of list (0-indexed)
‘(append list1 list2)’
     Concatenate two lists
‘(reverse list)’
     Reverse a list

6.3.3 String Functions
----------------------

‘(string-length str)’
     Get length of string
‘(string-append str1 str2)’
     Concatenate strings
‘(substring str start end)’
     Extract substring

6.3.4 Control Flow
------------------

‘(if condition then else)’
     Conditional expression
‘(when condition body...)’
     Execute body if condition is true
‘(unless condition body...)’
     Execute body if condition is false
‘(cond (test1 result1) (test2 result2) ... (else default))’
     Multi-way conditional

6.3.5 Comparison Functions
--------------------------

‘(= a b)’
     Numeric equality
‘(< a b)’
     Less than
‘(> a b)’
     Greater than
‘(<= a b)’
     Less than or equal
‘(>= a b)’
     Greater than or equal
‘(eq a b)’
     Object identity
‘(equal a b)’
     Structural equality

6.4 Macro System
================

T-Lisp supports macros with full quasiquote support.

6.4.1 Defining Macros
---------------------

     (defmacro when (condition &rest body)
       `(if ,condition (progn ,@body)))

     (defmacro save-and-quit ()
       '(progn (quick-save) (editor-quit)))

6.4.2 Quasiquote Syntax
-----------------------

‘`expression’
     Quasiquote - like quote but allows unquoting
‘,expression’
     Unquote within quasiquote
‘,@expression’
     Splice unquote - inserts list elements

6.4.3 Example Usage
-------------------

     (defmacro increment (var)
       `(setq ,var (+ ,var 1)))

     (setq x 5)
     (increment x)  ; x is now 6

6.5 Configuration File
======================

tmax loads ‘~/.tmaxrc’ on startup if it exists.

6.5.1 Example .tmaxrc
---------------------

     ;; ~/.tmaxrc - tmax configuration

     ;; Define custom word count function
     (defun word-count ()
       (let ((text (buffer-text)))
         (length (split-string text " "))))

     ;; Bind w to move 5 lines down in normal mode
     (key-bind "w" "(cursor-move (+ (cursor-line) 5) (cursor-column))" "normal")

     ;; Define save-and-quit macro
     (defmacro save-and-quit ()
       '(progn (quick-save) (editor-quit)))

     ;; Custom status message
     (editor-set-status "tmax ready - T-Lisp configured")


File: tmax.info,  Node: T-Lisp Language Reference,  Next: Buffer Management,  Prev: T-Lisp System,  Up: Top

7 T-Lisp Language Reference
***************************

This chapter provides a comprehensive reference for the T-Lisp language
used in tmax.

7.1 Language Fundamentals
=========================

7.1.1 Lexical Structure
-----------------------

7.1.1.1 Comments
................

     ;; This is a single-line comment
     ; This is also a comment

7.1.1.2 Identifiers
...................

Identifiers (symbols) can contain letters, numbers, and these
characters: ‘-’, ‘_’, ‘?’, ‘!’, ‘+’, ‘*’, ‘/’, ‘<’, ‘>’, ‘=’

   Valid identifiers:
     x
     my-variable
     buffer-insert
     nil?
     set!
     +
     <=

7.1.2 Data Types Reference
--------------------------

‘Numbers’
     Integers and floating-point numbers
          42        ; integer
          -17       ; negative integer
          3.14      ; floating-point
          -2.5      ; negative float

‘Strings’
     Text enclosed in double quotes.  Supports escape sequences.
          "hello world"
          "Line 1\nLine 2"    ; newline
          "Say \"hello\""     ; escaped quotes
          "Path\\file.txt"    ; escaped backslash

‘Symbols’
     Identifiers that evaluate to themselves or variables
          'x           ; quoted symbol (literal)
          x            ; symbol (variable reference)
          'my-symbol   ; quoted symbol

‘Lists’
     Ordered collections, fundamental data structure
          '(1 2 3)           ; quoted list
          (list 1 2 3)       ; constructed list
          '(a b (c d) e)     ; nested lists
          '()                ; empty list (same as nil)

‘Booleans’
     Truth values
          #t          ; true
          #f          ; false

‘Nil’
     Represents both false and empty list
          nil         ; nil/empty list
          '()         ; same as nil

7.2 Expression Evaluation
=========================

7.2.1 Function Calls
--------------------

     (function-name arg1 arg2 ...)
     (+ 1 2 3)                    ; arithmetic
     (buffer-insert "text")       ; editor function
     (cons 'a '(b c))            ; list construction

7.2.2 Special Forms
-------------------

‘(quote expr) or 'expr’
     Returns expression without evaluation
          (quote x)       ; returns symbol x
          'x              ; same as above
          '(1 2 3)        ; returns list (1 2 3)

‘(if condition then-expr else-expr)’
     Conditional evaluation
          (if (> x 0) "positive" "not positive")
          (if (nil? list) 0 (length list))

‘(let ((var1 val1) (var2 val2) ...) body...)’
     Local variable binding
          (let ((x 10) (y 20))
            (+ x y))                  ; returns 30

          (let ((name "tmax"))
            (string-append "Hello " name))

‘(defun name (params...) body...)’
     Function definition
          (defun square (x)
            (* x x))

          (defun greet (name)
            (string-append "Hello, " name "!"))

‘(defmacro name (params...) body...)’
     Macro definition
          (defmacro when (condition . body)
            `(if ,condition (progn ,@body)))

‘(progn expr1 expr2 ...)’
     Sequential evaluation, returns last expression
          (progn
            (buffer-insert "Hello")
            (buffer-insert " World")
            (cursor-move 0 0))

‘(setq var value)’
     Variable assignment
          (setq x 42)
          (setq name "tmax")

7.3 Built-in Functions Reference
================================

7.3.1 Arithmetic Operations
---------------------------

‘(+ numbers...)’
     Addition.  With no arguments returns 0.
          (+)           ; 0
          (+ 5)         ; 5
          (+ 1 2 3 4)   ; 10

‘(- numbers...)’
     Subtraction.  With one argument, negation.
          (- 5)         ; -5
          (- 10 3)      ; 7
          (- 20 5 2)    ; 13

‘(* numbers...)’
     Multiplication.  With no arguments returns 1.
          (*)           ; 1
          (* 3)         ; 3
          (* 2 3 4)     ; 24

‘(/ numbers...)’
     Division.  With one argument, reciprocal.
          (/ 2)         ; 0.5
          (/ 8 2)       ; 4
          (/ 24 2 3)    ; 4

‘(mod dividend divisor)’
     Modulo operation
          (mod 7 3)     ; 1
          (mod 10 4)    ; 2

7.3.2 Comparison Operations
---------------------------

‘(= numbers...)’
     Numeric equality
          (= 3 3)       ; #t
          (= 1 2)       ; #f
          (= 1 1 1)     ; #t

‘(< numbers...)’
     Numeric less-than (ascending order)
          (< 1 2)       ; #t
          (< 3 2)       ; #f
          (< 1 2 3)     ; #t

‘(> numbers...)’
     Numeric greater-than (descending order)
          (> 2 1)       ; #t
          (> 1 2)       ; #f
          (> 3 2 1)     ; #t

‘(<= numbers...)’
     Numeric less-than-or-equal
          (<= 1 2)      ; #t
          (<= 2 2)      ; #t
          (<= 3 2)      ; #f

‘(>= numbers...)’
     Numeric greater-than-or-equal
          (>= 2 1)      ; #t
          (>= 2 2)      ; #t
          (>= 1 2)      ; #f

‘(equal expr1 expr2)’
     Deep structural equality
          (equal 'a 'a)           ; #t
          (equal '(1 2) '(1 2))   ; #t
          (equal "hi" "hi")       ; #t

7.3.3 List Operations
---------------------

‘(cons car cdr)’
     Construct cons cell (list node)
          (cons 1 '(2 3))         ; (1 2 3)
          (cons 'a 'b)            ; (a . b) - dotted pair
          (cons 1 nil)            ; (1)

‘(car list)’
     Get first element (head) of list
          (car '(1 2 3))          ; 1
          (car '((a b) c))        ; (a b)

‘(cdr list)’
     Get rest of list (tail) after first element
          (cdr '(1 2 3))          ; (2 3)
          (cdr '(a))              ; nil

‘(length list)’
     Get number of elements in list
          (length '())            ; 0
          (length '(a b c))       ; 3

‘(nth n list)’
     Get nth element (0-indexed)
          (nth 0 '(a b c))        ; a
          (nth 2 '(x y z))        ; z

‘(append list1 list2 ...)’
     Concatenate lists
          (append '(1 2) '(3 4))      ; (1 2 3 4)
          (append '(a) '(b) '(c))     ; (a b c)

‘(reverse list)’
     Reverse order of list elements
          (reverse '(1 2 3))      ; (3 2 1)
          (reverse '(a))          ; (a)

‘(list elements...)’
     Create list from arguments
          (list)              ; nil
          (list 1 2 3)        ; (1 2 3)
          (list 'a (+ 1 2))   ; (a 3)

7.3.4 String Operations
-----------------------

‘(string-length str)’
     Get length of string
          (string-length "hello")     ; 5
          (string-length "")          ; 0

‘(string-append str1 str2 ...)’
     Concatenate strings
          (string-append "hello" " " "world")  ; "hello world"
          (string-append "a" "b" "c")          ; "abc"

‘(substring str start end)’
     Extract portion of string
          (substring "hello" 1 4)     ; "ell"
          (substring "world" 0 2)     ; "wo"

7.3.5 Type Predicates
---------------------

‘(nil? expr)’
     Test if expression is nil
          (nil? nil)          ; #t
          (nil? '())          ; #t
          (nil? 0)            ; #f

‘(number? expr)’
     Test if expression is a number
          (number? 42)        ; #t
          (number? 3.14)      ; #t
          (number? "42")      ; #f

‘(string? expr)’
     Test if expression is a string
          (string? "hello")   ; #t
          (string? 'hello)    ; #f

‘(symbol? expr)’
     Test if expression is a symbol
          (symbol? 'x)        ; #t
          (symbol? "x")       ; #f

‘(list? expr)’
     Test if expression is a proper list
          (list? '(1 2 3))    ; #t
          (list? nil)         ; #t
          (list? 'atom)       ; #f

7.4 Advanced Features
=====================

7.4.1 Macro System
------------------

T-Lisp supports a full macro system with quasiquote.

7.4.1.1 Quasiquote Syntax
.........................

‘`expr’
     Quasiquote - like quote but allows unquoting
‘,expr’
     Unquote - evaluate expression within quasiquote
‘,@expr’
     Unquote-splice - insert list elements

7.4.1.2 Macro Examples
......................

     ;; Simple macro
     (defmacro when (condition . body)
       `(if ,condition (progn ,@body)))

     ;; Usage
     (when (> x 0)
       (print "positive")
       (print "number"))

     ;; Expands to:
     ;; (if (> x 0)
     ;;     (progn (print "positive") (print "number")))

7.4.2 Lexical Scoping
---------------------

Variables are lexically scoped with proper closure support.

     (defun make-counter ()
       (let ((count 0))
         (lambda ()
           (setq count (+ count 1))
           count)))

     (setq counter1 (make-counter))
     (setq counter2 (make-counter))

     (counter1)  ; 1
     (counter1)  ; 2
     (counter2)  ; 1 (independent)

7.4.3 Tail Call Optimization
----------------------------

Recursive functions in tail position are optimized.

     ;; Tail-recursive factorial
     (defun factorial (n acc)
       (if (<= n 1)
           acc
           (factorial (- n 1) (* n acc))))

     (defun fact (n)
       (factorial n 1))


File: tmax.info,  Node: Buffer Management,  Next: Configuration,  Prev: T-Lisp Language Reference,  Up: Top

8 Buffer Management
*******************

tmax uses a buffer-based approach to manage multiple files and text
content.

8.1 Understanding Buffers
=========================

A buffer in tmax is an in-memory representation of text that may or may
not be associated with a file.  Each buffer:

   • Has a unique name
   • Contains text content using efficient gap buffer data structure
   • Tracks cursor position and viewport
   • May be associated with a file on disk

8.2 Buffer Operations
=====================

8.2.1 Creating Buffers
----------------------

Buffers are created automatically when:
   • Opening a file: ‘deno task start filename.txt’
   • Starting tmax without arguments creates ‘*scratch*’ buffer

8.2.2 Switching Buffers
-----------------------

Currently, tmax maintains one active buffer at a time.  Future versions
will include buffer switching commands.

8.3 File Operations
===================

8.3.1 Opening Files
-------------------

     deno task start myfile.txt

8.3.2 Saving Files
------------------

From command mode:
     :w    # Save current buffer
     :wq   # Save and quit

8.4 Buffer Implementation
=========================

tmax uses a gap buffer implementation for efficient text editing:

   • O(1) insertion/deletion at cursor position
   • Efficient memory usage for large files
   • Optimized for typical editing patterns


File: tmax.info,  Node: Configuration,  Next: Command Reference,  Prev: Buffer Management,  Up: Top

9 Configuration
***************

tmax is highly configurable through T-Lisp scripting.

9.1 Configuration File
======================

tmax loads ‘~/.tmaxrc’ on startup for user customization.

9.2 Configuration Examples
==========================

9.2.1 Basic Key Bindings
------------------------

     ;; Bind Ctrl+S to save in normal mode
     (key-bind "C-s" "(quick-save)" "normal")

     ;; Bind F2 to show current time
     (key-bind "F2" "(editor-set-status (current-time))" "normal")

9.2.2 Custom Functions
----------------------

     ;; Define function to insert current date
     (defun insert-date ()
       (buffer-insert (format-date (current-time))))

     ;; Bind it to a key
     (key-bind "D" "(insert-date)" "normal")

9.2.3 Custom Macros
-------------------

     ;; Macro for common operation
     (defmacro duplicate-line ()
       '(progn
          (beginning-of-line)
          (set-mark)
          (end-of-line)
          (copy-region)
          (newline)
          (paste)))

     ;; Bind macro to key
     (key-bind "C-d" "(duplicate-line)" "normal")

9.2.4 Mode-Specific Configuration
---------------------------------

     ;; Different bindings for different modes
     (key-bind "C-c" "(copy-selection)" "visual")
     (key-bind "C-v" "(paste-clipboard)" "insert")
     (key-bind "C-z" "(undo)" "normal")


File: tmax.info,  Node: Command Reference,  Next: Examples,  Prev: Configuration,  Up: Top

10 Command Reference
********************

Complete reference for all available T-Lisp functions in tmax.

10.1 Buffer Functions
=====================

‘(buffer-insert text)’
     Insert TEXT at current cursor position.

‘(buffer-delete count)’
     Delete COUNT characters before cursor position.

‘(buffer-text)’
     Return entire buffer content as string.

‘(buffer-length)’
     Return total character count in buffer.

‘(buffer-line-count)’
     Return number of lines in buffer.

‘(buffer-get-line line-num)’
     Return content of line at LINE-NUM (0-indexed).

‘(buffer-substring start end)’
     Return text between START and END positions.

10.2 Cursor Functions
=====================

‘(cursor-move line column)’
     Move cursor to LINE and COLUMN (0-indexed).

‘(cursor-line)’
     Return current line number (0-indexed).

‘(cursor-column)’
     Return current column number (0-indexed).

‘(cursor-position)’
     Return list ‘(line column)’ of current position.

10.3 Editor Functions
=====================

‘(editor-mode)’
     Return current editing mode as string.

‘(editor-set-mode mode)’
     Set editing mode to MODE ("normal", "insert", "visual", "command",
     "mx").

‘(editor-quit)’
     Quit the editor immediately.

‘(editor-status)’
     Return current status message.

‘(editor-set-status message)’
     Set status line to display MESSAGE.

‘(editor-enter-command-mode)’
     Switch to command mode.

‘(editor-exit-command-mode)’
     Exit command mode and return to normal mode.

‘(editor-execute-command-line)’
     Execute the current command line content.

‘(editor-handle-space)’
     Handle space key press (part of M-x sequence).

‘(editor-handle-semicolon)’
     Handle semicolon key press (completes M-x sequence).

‘(editor-exit-mx-mode)’
     Exit M-x mode and return to normal mode.

‘(editor-execute-mx-command)’
     Execute the current M-x command.

10.4 Key Binding Functions
==========================

‘(key-bind key command [mode])’
     Bind KEY to execute COMMAND in optional MODE.  If MODE is omitted,
     binding applies to all modes.

10.5 File Functions
===================

File operations are performed through the editor interface:

‘(save-buffer)’
     Save current buffer to associated file.

‘(load-file filename)’
     Load FILENAME into new buffer.


File: tmax.info,  Node: Examples,  Next: Troubleshooting,  Prev: Command Reference,  Up: Top

11 Examples
***********

Real-world examples of tmax usage and customization.

11.1 Basic Editing Session
==========================

     # Start tmax
     deno task start

     # Enter insert mode
     i

     # Type some text
     Hello, world!
     This is tmax.

     # Return to normal mode
     <Escape>

     # Navigate around
     hjkl

     # Save and quit
     :wq

11.2 Configuration Examples
===========================

11.2.1 Programmer's Setup
-------------------------

     ;; ~/.tmaxrc for programming

     ;; Line numbers function
     (defun show-line-number ()
       (editor-set-status
         (string-append "Line: " (number-to-string (+ (cursor-line) 1)))))

     ;; Bind to show current line
     (key-bind "L" "(show-line-number)" "normal")

     ;; Quick comment toggle
     (defun toggle-comment ()
       (beginning-of-line)
       (if (looking-at ";;")
           (delete-char 2)
         (insert ";; ")))

     (key-bind "C-/" "(toggle-comment)" "normal")

     ;; Auto-indent function
     (defun smart-indent ()
       (let ((current-indent (current-indentation)))
         (newline)
         (insert-spaces current-indent)))

     (key-bind "Enter" "(smart-indent)" "insert")

11.2.2 Writer's Setup
---------------------

     ;; ~/.tmaxrc for writing

     ;; Word count function
     (defun word-count ()
       (let ((text (buffer-text)))
         (editor-set-status
           (string-append
             "Words: "
             (number-to-string (length (split-string text)))))))

     (key-bind "W" "(word-count)" "normal")

     ;; Insert current date
     (defun insert-date ()
       (buffer-insert (format-time "%Y-%m-%d")))

     (key-bind "D" "(insert-date)" "normal")

     ;; Paragraph navigation
     (key-bind "}" "(next-paragraph)" "normal")
     (key-bind "{" "(previous-paragraph)" "normal")

11.3 Advanced Customization
===========================

11.3.1 Custom Mode
------------------

     ;; Define a custom "code" mode for programming
     (defun enter-code-mode ()
       (editor-set-mode "normal")
       (editor-set-status "-- CODE MODE --")
       ;; Set up code-specific bindings
       (key-bind "TAB" "(smart-indent)" "normal")
       (key-bind "C-c C-c" "(compile-buffer)" "normal"))

     (defun exit-code-mode ()
       (editor-set-status "-- NORMAL --")
       ;; Remove code-specific bindings
       (remove-key-bind "TAB" "normal")
       (remove-key-bind "C-c C-c" "normal"))

     ;; Toggle code mode
     (key-bind "C-c" "(enter-code-mode)" "normal")

11.3.2 Project Management
-------------------------

     ;; Project-specific configuration

     ;; Quick file switching in project
     (defun open-project-file (filename)
       (let ((project-root "/path/to/project/"))
         (find-file (string-append project-root filename))))

     ;; Bind common project files
     (key-bind "1" "(open-project-file \"main.ts\")" "normal")
     (key-bind "2" "(open-project-file \"README.md\")" "normal")
     (key-bind "3" "(open-project-file \"package.json\")" "normal")

     ;; Build project
     (defun build-project ()
       (shell-command "deno task build")
       (editor-set-status "Build complete"))

     (key-bind "B" "(build-project)" "normal")


File: tmax.info,  Node: Troubleshooting,  Next: Index,  Prev: Examples,  Up: Top

12 Troubleshooting
******************

Common issues and their solutions.

12.1 Installation Issues
========================

12.1.1 Deno Not Found
---------------------

*Problem:* ‘deno: command not found’

   *Solution:*
  1. Install Deno:
     <https://deno.land/manual/getting_started/installation>
  2. Add Deno to PATH: ‘export PATH="$HOME/.deno/bin:$PATH"’
  3. Restart terminal and try again

12.1.2 Permission Errors
------------------------

*Problem:* ‘PermissionDenied’ when starting tmax

   *Solution:*
  1. Ensure proper permissions: ‘deno run --allow-read --allow-write
     src/main.ts’
  2. Check file permissions in project directory
  3. Use ‘deno task start’ which has proper permissions configured

12.2 Runtime Issues
===================

12.2.1 Terminal Display Problems
--------------------------------

*Problem:* Garbled display or cursor positioning issues

   *Solution:*
  1. Ensure terminal supports ANSI escape sequences
  2. Try different terminal: xterm, gnome-terminal, iTerm2
  3. Check ‘TERM’ environment variable
  4. Verify terminal size with ‘tput cols; tput lines’

12.2.2 Key Binding Not Working
------------------------------

*Problem:* Custom key bindings don't respond

   *Solution:*
  1. Check T-Lisp syntax in ‘.tmaxrc’
  2. Verify key name format (e.g., "C-c" not "Ctrl+C")
  3. Test with simple binding: ‘(key-bind "x" "(editor-set-status
     \"test\")" "normal")’
  4. Check mode specificity - binding may be for different mode

12.2.3 Performance Issues
-------------------------

*Problem:* Slow response or high memory usage

   *Solution:*
  1. Check file size - very large files may impact performance
  2. Reduce complex T-Lisp functions in tight loops
  3. Monitor with ‘deno run --allow-read --inspect src/main.ts’
  4. Consider splitting large files

12.3 Configuration Issues
=========================

12.3.1 .tmaxrc Not Loading
--------------------------

*Problem:* Custom configuration not applied

   *Solution:*
  1. Verify file location: ‘~/.tmaxrc’ (exact path)
  2. Check file permissions: ‘ls -la ~/.tmaxrc’
  3. Test with simple configuration: ‘(editor-set-status "Config
     loaded")’
  4. Check for T-Lisp syntax errors

12.3.2 T-Lisp Syntax Errors
---------------------------

*Problem:* ‘SyntaxError’ when loading configuration

   *Solution:*
  1. Check parentheses balance
  2. Verify string quoting: ‘"string"’ not ‘'string'’
  3. Use proper escaping: ‘"\n"’ for newline
  4. Test expressions in T-Lisp REPL: ‘deno task repl’

12.4 Getting Help
=================

  1. Check this manual for relevant sections
  2. Test with minimal configuration
  3. Use T-Lisp REPL for testing: ‘deno task repl’
  4. Run test suite: ‘deno task test’
  5. Report bugs with minimal reproduction case


File: tmax.info,  Node: Index,  Prev: Troubleshooting,  Up: Top

Index
*****

 [index ]
* Menu:

* .tmaxrc:                               Configuration.       (line   6)
* API:                                   Command Reference.   (line   6)
* basic usage:                           Basic Usage.         (line   6)
* buffers:                               Buffer Management.   (line   6)
* command mode:                          Editing Modes.       (line  62)
* commands:                              Command Reference.   (line   6)
* configuration:                         Configuration.       (line   6)
* customization:                         Key Bindings.        (line   6)
* customization <1>:                     Configuration.       (line   6)
* debugging:                             Troubleshooting.     (line   6)
* deno:                                  Installation.        (line   5)
* emacs commands:                        Editing Modes.       (line  92)
* examples:                              Examples.            (line   6)
* extensibility:                         T-Lisp System.       (line   6)
* files:                                 Buffer Management.   (line   6)
* functions:                             Command Reference.   (line   6)
* getting started:                       Basic Usage.         (line   5)
* insert mode:                           Editing Modes.       (line  38)
* installation:                          Installation.        (line   6)
* introduction:                          Introduction.        (line   6)
* key bindings:                          Key Bindings.        (line   6)
* keybindings:                           Key Bindings.        (line   6)
* language reference:                    T-Lisp Language Reference.
                                                              (line   6)
* M-x mode:                              Editing Modes.       (line  92)
* modal editing:                         Editing Modes.       (line   6)
* modes:                                 Editing Modes.       (line   6)
* multiple files:                        Buffer Management.   (line   6)
* navigation:                            Editing Modes.       (line  12)
* normal mode:                           Editing Modes.       (line  12)
* problems:                              Troubleshooting.     (line   6)
* real-world usage:                      Examples.            (line   6)
* scripting:                             T-Lisp System.       (line   6)
* setup:                                 Installation.        (line   6)
* syntax reference:                      T-Lisp Language Reference.
                                                              (line   6)
* T-Lisp:                                T-Lisp System.       (line   6)
* T-Lisp reference:                      T-Lisp Language Reference.
                                                              (line   6)
* text input:                            Editing Modes.       (line  38)
* text selection:                        Editing Modes.       (line 121)
* troubleshooting:                       Troubleshooting.     (line   6)
* usage examples:                        Examples.            (line   6)
* vim commands:                          Editing Modes.       (line  62)
* visual mode:                           Editing Modes.       (line 121)
* what is tmax:                          Introduction.        (line   6)


Tag Table:
Node: Top522
Node: Introduction1866
Node: Installation4404
Node: Basic Usage5611
Node: Editing Modes6899
Node: Key Bindings9874
Node: T-Lisp System14049
Node: T-Lisp Language Reference18348
Node: Buffer Management27648
Node: Configuration29154
Node: Command Reference30601
Node: Examples33118
Node: Troubleshooting36445
Node: Index39376

End Tag Table


Local Variables:
coding: utf-8
Info-documentlanguage: en
End:
